# -*- coding: utf-8 -*-

# --- 1. Gerekli Kütüphaneleri Yükle ---
!pip install Flask Flask-Cors requests pyngrok google-generativeai -q

# --- 2. Kütüphaneleri ve Modülleri İçe Aktar ---
import os
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from pyngrok import ngrok, conf
import google.generativeai as genai
import threading

# --- 3. API Anahtarlarını ve Ngrok Token'ını Al ---
# Colab Secrets'a GEMINI_API_KEY, OPENROUTER_API_KEY ve NGROK_AUTHTOKEN ekleyin
try:
    from google.colab import userdata
    GEMINI_API_KEY = userdata.get('GEMINI_API_KEY')
    OPENROUTER_API_KEY = userdata.get('OPENROUTER_API_KEY') # OpenRouter anahtarını al
    NGROK_AUTHTOKEN = userdata.get('NGROK_AUTHTOKEN')
    print("API anahtarları ve Ngrok Authtoken Colab Secrets'tan alındı.")

    # Gemini API'sini yapılandır
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        print("Gemini API başarıyla yapılandırıldı.")
    else:
        print("Uyarı: Gemini API anahtarı bulunamadı.")

    # Ngrok'u yapılandır
    if NGROK_AUTHTOKEN:
        conf.get_default().auth_token = NGROK_AUTHTOKEN
        print("Ngrok Authtoken başarıyla ayarlandı.")
    else:
        print("Uyarı: Ngrok Authtoken bulunamadı. Ngrok tüneli kısıtlı olabilir.")

    if not OPENROUTER_API_KEY:
        print("Uyarı: OpenRouter API anahtarı bulunamadı.")


except ImportError:
    print("Google Colab ortamında değilsiniz veya userdata modülü bulunamadı.")
    GEMINI_API_KEY = None
    OPENROUTER_API_KEY = None
    NGROK_AUTHTOKEN = None
except KeyError as e:
     print(f"Colab Secrets'ta eksik anahtar: {e}. Lütfen sol menüden (🔑) gerekli anahtarları ekleyin.")
     if 'GEMINI_API_KEY' not in locals(): GEMINI_API_KEY = None
     if 'OPENROUTER_API_KEY' not in locals(): OPENROUTER_API_KEY = None
     if 'NGROK_AUTHTOKEN' not in locals(): NGROK_AUTHTOKEN = None
except Exception as e:
    print(f"API anahtarı veya Ngrok token yapılandırılırken hata: {e}")
    GEMINI_API_KEY = None
    OPENROUTER_API_KEY = None
    NGROK_AUTHTOKEN = None


# --- 4. Flask Uygulamasını Başlat ---
app = Flask(__name__)
CORS(app)

# --- 5. Bilinen Modeller (Bilgi amaçlı, katı kontrol için değil) ---
# Bu liste artık sadece bilgi veya varsayılanlar için kullanılabilir.
# Gerçek kontrol provider'a göre yapılacak.
known_models_info = {
    # Gemini Modelleri
    "gemini-pro": { "name": "Gemini 1.0 Pro (Google)", "provider": "google" },
    "gemini-1.5-flash-latest": { "name": "Gemini 1.5 Flash (Google)", "provider": "google" },
    "gemini-2.5-flash-preview-04-17": { "name": "Gemini 2.5 Flash Preview (Google)", "provider": "google" },
    # OpenRouter Örnekleri
    "openai/gpt-4o-mini": { "name": "GPT-4o Mini (OpenRouter)", "provider": "openrouter" },
    "anthropic/claude-3-haiku-20240307": { "name": "Claude 3 Haiku (OpenRouter)", "provider": "openrouter" },
    "mistralai/mistral-7b-instruct": { "name": "Mistral 7B Instruct (OpenRouter)", "provider": "openrouter" },
    "gryphe/mythomax-l2-13b": { "name": "MythoMax L2 13B (OpenRouter)", "provider": "openrouter", "isPremium": True }
}


# --- 6. AI API Çağrı Fonksiyonları ---

def call_gemini_api(prompt, model_id="gemini-pro", persona=""):
    """Calls Google Gemini API using the official library."""
    if not GEMINI_API_KEY: return "Gemini API anahtarı Colab Secrets'ta ayarlanmamış."
    # Modelin Gemini'ye ait olup olmadığını basitçe kontrol et (örn: ID'de 'gemini' geçiyor mu?)
    # Veya bilinen listeye bakılabilir ama katı olmamalı.
    # if model_id not in known_models_info or known_models_info[model_id]["provider"] != "google":
    #     print(f"Uyarı: Bilinmeyen Gemini modeli istendi: {model_id}")
        # Yine de çağırmayı deneyebiliriz veya hata verebiliriz. Şimdilik deneyelim.

    try:
        default_max_output = 8192
        generation_config = {"temperature": 0.7, "top_p": 1, "top_k": 1, "max_output_tokens": default_max_output}
        safety_settings = [ {"category": c, "threshold": "BLOCK_MEDIUM_AND_ABOVE"} for c in ["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT"]]
        actual_model_name_for_api = model_id # Gemini için ID genellikle aynıdır
        model = genai.GenerativeModel(model_name=actual_model_name_for_api, generation_config=generation_config, safety_settings=safety_settings)
        full_prompt = f"Senin görevin: {persona if persona else 'yardımcı bir asistansın'}. Kullanıcının mesajı: {prompt}"
        chat = model.start_chat(history=[])
        response = chat.send_message(full_prompt)
        return response.text.strip()
    except Exception as e:
         print(f"Gemini Kütüphane Hatası (Model: {model_id}): {e}")
         error_message = str(e)
         if "API key not valid" in error_message: return "Gemini API hatası: Geçersiz API anahtarı."
         # Model bulunamadı hatasını daha genel yakala
         elif "model" in error_message and ("not found" in error_message or "does not exist" in error_message or "permission denied" in error_message):
              return f"Gemini API hatası: '{model_id}' modeli bulunamadı veya bu API anahtarı ile erişilemiyor."
         elif "User location is not supported" in error_message: return "Gemini API hatası: Konum desteklenmiyor."
         elif "RESOURCE_EXHAUSTED" in error_message: return "Gemini API hatası: Kaynaklar tükendi."
         return f"Gemini API hatası: {error_message}"

def call_openrouter_api(prompt, model_id, persona=""):
    """Calls OpenRouter API."""
    if not OPENROUTER_API_KEY: return "OpenRouter API anahtarı Colab Secrets'ta ayarlanmamış."
    # Model ID'sinin listede olup olmadığını kontrol etmeye gerek yok, doğrudan deneyeceğiz.

    api_url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        # "HTTP-Referer": "YOUR_SITE_URL", # Gerekirse ekleyin
        # "X-Title": "YOUR_APP_NAME", # Gerekirse ekleyin
    }
    system_prompt = f"Sen {persona if persona else 'yardımcı bir asistansın'}."
    data = { "model": model_id, "messages": [{"role": "system", "content": system_prompt}, {"role": "user", "content": prompt}], "max_tokens": 2048, "temperature": 0.7 }
    try:
        response = requests.post(api_url, headers=headers, json=data, timeout=45)
        response.raise_for_status() # 4xx veya 5xx hatalarında exception fırlatır
        result = response.json()
        return result.get("choices", [{}])[0].get("message", {}).get("content", "Yanıt alınamadı.").strip()
    except requests.exceptions.RequestException as e:
        print(f"OpenRouter API Hatası (Model: {model_id}): {e}")
        error_detail = ""
        status_code = response.status_code if 'response' in locals() and response else None
        try: error_detail = response.json().get('error', {}).get('message', str(e))
        except: error_detail = str(e)

        if status_code == 401: return "OpenRouter API hatası: Geçersiz API anahtarı."
        if status_code == 402: return "OpenRouter API hatası: Kredi yetersiz."
        if status_code == 429: return "OpenRouter API hatası: Hız limiti aşıldı."
        # Model bulunamadı hatası (400 veya 404 olabilir)
        if status_code in [400, 404] and ("model not found" in error_detail.lower() or "invalid model" in error_detail.lower()):
             return f"OpenRouter API hatası: '{model_id}' modeli bulunamadı veya desteklenmiyor."
        if status_code == 400 and "context length" in error_detail.lower(): return "OpenRouter API hatası: İstek, modelin context limitini aşıyor."
        return f"OpenRouter API hatası: {error_detail} (Kod: {status_code})"
    except Exception as e:
        print(f"Beklenmedik Hata (OpenRouter - Model: {model_id}): {e}")
        return "OpenRouter yanıtı işlenirken hata."


# --- 7. API Endpoint (/api/chat) ---
@app.route('/api/chat', methods=['POST'])
def chat_handler():
    """Handles chat requests, routing to Gemini or OpenRouter."""
    data = request.json
    if not data: return jsonify({"error": "Geçersiz istek"}), 400

    user_message = data.get('message')
    model_id_from_frontend = data.get('modelId') # Frontend'den gelen model ID'si
    character_name = data.get('characterName', 'Bilinmeyen Karakter')
    persona_key = data.get('personaKey', 'default')
    custom_persona_text = data.get('customPersonaText', '')

    if not user_message or not model_id_from_frontend:
        return jsonify({"error": "Eksik bilgi: 'message' ve 'modelId' gerekli."}), 400

    # Persona'yı belirle
    persona_description = ""
    if persona_key == 'custom' and custom_persona_text: persona_description = custom_persona_text
    elif persona_key == 'witty': persona_description = f"{character_name} adında esprili bir arkadaşsın."
    elif persona_key == 'wise': persona_description = f"{character_name} adında bilge bir öğretmensin."
    else: persona_description = f"{character_name} adında yardımcı bir asistansın."

    ai_response = "Bir hata oluştu veya model desteklenmiyor."

    # *** DEĞİŞTİ: Model ID'sine göre yönlendirme ***
    # ID'de '/' varsa OpenRouter olduğunu varsayalım
    # Veya bilinen Gemini ID'lerinden biri mi diye kontrol edelim
    is_known_gemini = model_id_from_frontend in known_models_info and known_models_info[model_id_from_frontend]["provider"] == "google"
    is_likely_openrouter = "/" in model_id_from_frontend

    if is_known_gemini:
        if GEMINI_API_KEY:
            print(f"Gemini API çağrılıyor: Model={model_id_from_frontend}")
            ai_response = call_gemini_api(user_message, model_id_from_frontend, persona_description)
        else:
            ai_response = "Gemini modeli istendi ancak Gemini API anahtarı ayarlanmamış."
    elif is_likely_openrouter:
        if OPENROUTER_API_KEY:
            print(f"OpenRouter API çağrılıyor: Model={model_id_from_frontend}")
            ai_response = call_openrouter_api(user_message, model_id_from_frontend, persona_description)
        else:
            ai_response = "OpenRouter modeli istendi ancak OpenRouter API anahtarı ayarlanmamış."
    else:
         # Ne Gemini ne de OpenRouter formatına uymuyorsa
         ai_response = f"Desteklenmeyen veya tanınmayan model ID formatı: '{model_id_from_frontend}'."


    return jsonify({"reply": ai_response})

# --- 8. Uygulamayı ve Ngrok Tünelini Başlat ---
PORT = 5000

def run_flask():
    print(f"Flask uygulaması http://localhost:{PORT} adresinde başlatılıyor...")
    app.run(port=PORT, use_reloader=False, debug=False)

if __name__ == '__main__':
    try: ngrok.kill()
    except Exception as e: print(f"Mevcut ngrok işlemleri sonlandırılamadı (sorun değil): {e}")

    try:
        public_url = ngrok.connect(PORT)
        print(f" * Ngrok Tüneli {public_url} -> http://127.0.0.1:{PORT}")
        print("Flask uygulaması (Gemini & Esnek OpenRouter ile) başlatılıyor...")
        # Artık tüm modelleri listelemeye gerek yok, frontend dinamik alıyor
        # print(f" * Bilinen Modeller: {list(known_models_info.keys())}")
        print(f" * Frontend API URL'sini şununla güncelleyin: {public_url}/api/chat")
        run_flask()
    except Exception as e:
        print(f"Ngrok başlatılırken veya Flask çalıştırılırken hata oluştu: {e}")
        error_str = str(e).lower()
        if "authentication failed" in error_str or "authtoken" in error_str: print("Hata: Ngrok kimlik doğrulaması başarısız oldu. Colab Secrets'taki NGROK_AUTHTOKEN'ı kontrol edin.")
        elif "could not connect" in error_str: print("Hata: Ngrok servisine bağlanılamadı.")
        else: print("Ngrok Authtoken'ınızın Colab Secrets'ta doğru ayarlandığından emin olun.")

